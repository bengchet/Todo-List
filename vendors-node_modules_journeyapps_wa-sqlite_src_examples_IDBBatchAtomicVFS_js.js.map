{"version":3,"file":"vendors-node_modules_journeyapps_wa-sqlite_src_examples_IDBBatchAtomicVFS_js.js","mappings":"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","sources":["webpack://PowerSync Angular Demo/./node_modules/@journeyapps/wa-sqlite/src/VFS.js","webpack://PowerSync Angular Demo/./node_modules/@journeyapps/wa-sqlite/src/examples/IDBBatchAtomicVFS.js","webpack://PowerSync Angular Demo/./node_modules/@journeyapps/wa-sqlite/src/examples/IDBContext.js","webpack://PowerSync Angular Demo/./node_modules/@journeyapps/wa-sqlite/src/examples/WebLocks.js"],"sourcesContent":["// Copyright 2022 Roy T. Hashimoto. All Rights Reserved.\nimport * as VFS from './sqlite-constants.js';\nexport * from './sqlite-constants.js';\n\n// Base class for a VFS.\nexport class Base {\n  mxPathName = 64;\n\n  /**\n   * @param {number} fileId \n   * @returns {number}\n   */\n  xClose(fileId) {\n    return VFS.SQLITE_IOERR;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {Uint8Array} pData \n   * @param {number} iOffset\n   * @returns {number}\n   */\n  xRead(fileId, pData, iOffset) {\n    return VFS.SQLITE_IOERR;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {Uint8Array} pData \n   * @param {number} iOffset\n   * @returns {number}\n   */\n  xWrite(fileId, pData, iOffset) {\n    return VFS.SQLITE_IOERR;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} iSize \n   * @returns {number}\n   */\n  xTruncate(fileId, iSize) {\n    return VFS.SQLITE_IOERR;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {*} flags \n   * @returns {number}\n   */\n  xSync(fileId, flags) {\n    return VFS.SQLITE_OK;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {DataView} pSize64 \n   * @returns {number}\n   */\n  xFileSize(fileId, pSize64) {\n    return VFS.SQLITE_IOERR;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} flags \n   * @returns {number}\n   */\n  xLock(fileId, flags) {\n    return VFS.SQLITE_OK;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} flags \n   * @returns {number}\n   */\n  xUnlock(fileId, flags) {\n    return VFS.SQLITE_OK;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {DataView} pResOut \n   * @returns {number}\n   */\n  xCheckReservedLock(fileId, pResOut) {\n    pResOut.setInt32(0, 0, true);\n    return VFS.SQLITE_OK;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} op \n   * @param {DataView} pArg \n   * @returns {number}\n   */\n  xFileControl(fileId, op, pArg) {\n    return VFS.SQLITE_NOTFOUND;\n  }\n\n  /**\n   * @param {number} fileId \n   * @returns {number}\n   */\n  xSectorSize(fileId) {\n    return 512;\n  }\n\n  /**\n   * @param {number} fileId \n   * @returns {number}\n   */\n  xDeviceCharacteristics(fileId) {\n    return 0;\n  }\n\n  /**\n   * @param {string?} name \n   * @param {number} fileId \n   * @param {number} flags \n   * @param {DataView} pOutFlags \n   * @returns {number}\n   */\n  xOpen(name, fileId, flags, pOutFlags) {\n    return VFS.SQLITE_CANTOPEN;\n  }\n\n  /**\n   * @param {string} name \n   * @param {number} syncDir \n   * @returns {number}\n   */\n  xDelete(name, syncDir) {\n    return VFS.SQLITE_IOERR;\n  }\n\n  /**\n   * @param {string} name \n   * @param {number} flags \n   * @param {DataView} pResOut \n   * @returns {number}\n   */\n  xAccess(name, flags, pResOut) {\n    return VFS.SQLITE_IOERR;\n  }\n\n  /**\n   * Handle asynchronous operation. This implementation will be overriden on\n   * registration by an Asyncify build.\n   * @param {function(): Promise<number>} f \n   * @returns {number}\n   */\n  handleAsync(f) {\n    // This default implementation deliberately does not match the\n    // declared signature. It will be used in testing VFS classes\n    // separately from SQLite. This will work acceptably for methods\n    // that simply return the handleAsync() result without using it.\n    // @ts-ignore\n    return f();\n  }\n}\n\nexport const FILE_TYPE_MASK = [\n  VFS.SQLITE_OPEN_MAIN_DB,\n  VFS.SQLITE_OPEN_MAIN_JOURNAL,\n  VFS.SQLITE_OPEN_TEMP_DB,\n  VFS.SQLITE_OPEN_TEMP_JOURNAL,\n  VFS.SQLITE_OPEN_TRANSIENT_DB,\n  VFS.SQLITE_OPEN_SUBJOURNAL,\n  VFS.SQLITE_OPEN_SUPER_JOURNAL\n].reduce((mask, element) => mask | element);","// Copyright 2022 Roy T. Hashimoto. All Rights Reserved.\nimport * as VFS from '../VFS.js';\nimport { WebLocksExclusive as WebLocks } from './WebLocks.js';\nimport { IDBContext } from './IDBContext.js';\n\nconst SECTOR_SIZE = 512;\nconst MAX_TASK_MILLIS = 3000;\n\n/**\n * @typedef VFSOptions\n * @property {\"default\"|\"strict\"|\"relaxed\"} [durability]\n * @property {\"deferred\"|\"manual\"} [purge]\n * @property {number} [purgeAtLeast]\n */\n\n/** @type {VFSOptions} */\nconst DEFAULT_OPTIONS = {\n  durability: \"default\",\n  purge: \"deferred\",\n  purgeAtLeast: 16\n};\n\nfunction log(...args) {\n  // console.debug(...args);\n}\n\n/**\n * @typedef FileBlock IndexedDB object with key [path, offset, version]\n * @property {string} path\n * @property {number} offset negative of position in file\n * @property {number} version\n * @property {Uint8Array} data\n *\n * @property {number} [fileSize] Only present on block 0\n*/\n\n/**\n * @typedef OpenedFileEntry\n * @property {string} path\n * @property {number} flags\n * @property {FileBlock} block0\n * @property {boolean} isMetadataChanged\n * @property {WebLocks} locks\n * \n * @property {Set<number>} [changedPages]\n * @property {boolean} [overwrite]\n */\n\n// This sample VFS stores optionally versioned writes to IndexedDB, which\n// it uses with the SQLite xFileControl() batch atomic write feature.\nexport class IDBBatchAtomicVFS extends VFS.Base {\n  #options;\n  /** @type {Map<number, OpenedFileEntry>} */ #mapIdToFile = new Map();\n\n  /** @type {IDBContext} */ #idb;\n  /** @type {Set<string>} */ #pendingPurges = new Set();\n\n  #taskTimestamp = performance.now();\n  #pendingAsync = new Set();\n\n  // Asyncify can grow WebAssembly memory during an asynchronous call.\n  // If this happens, then any array buffer arguments will be detached.\n  // The workaround is when finding a detached buffer, set this handler\n  // function to process the new buffer outside handlerAsync().\n  #growthHandler = null;\n\n  constructor(idbDatabaseName = 'wa-sqlite', options = DEFAULT_OPTIONS) {\n    super();\n    this.name = idbDatabaseName;\n    this.#options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.#idb = new IDBContext(openDatabase(idbDatabaseName), {\n      durability: this.#options.durability\n    });\n  }\n\n  async close() {\n    for (const fileId of this.#mapIdToFile.keys()) {\n      await this.xClose(fileId);\n    }\n\n    await this.#idb?.close();\n    this.#idb = null;\n  }\n\n  /**\n   * @param {string?} name \n   * @param {number} fileId \n   * @param {number} flags \n   * @param {DataView} pOutFlags \n   * @returns {number}\n   */\n  xOpen(name, fileId, flags, pOutFlags) {\n    const result = this.handleAsync(async () => {\n      if (name === null) name = `null_${fileId}`;\n      log(`xOpen ${name} 0x${fileId.toString(16)} 0x${flags.toString(16)}`);\n\n      try {\n        // Filenames can be URLs, possibly with query parameters.\n        const url = new URL(name, 'http://localhost/');\n        /** @type {OpenedFileEntry} */ const file = {\n          path: url.pathname,\n          flags,\n          block0: null,\n          isMetadataChanged: true,\n          locks: new WebLocks(url.pathname)\n        };\n        this.#mapIdToFile.set(fileId, file);\n\n        // Read the first block, which also contains the file metadata.\n        await this.#idb.run('readwrite', async ({blocks}) => {\n          file.block0 = await blocks.get(this.#bound(file, 0));\n          if (!file.block0) {\n            if (flags & VFS.SQLITE_OPEN_CREATE) {\n              file.block0 = {\n                path: file.path,\n                offset: 0,\n                version: 0,\n                data: new Uint8Array(0),\n                fileSize: 0\n              };\n              blocks.put(file.block0);\n            } else {\n              throw new Error(`file not found: ${file.path}`);\n            }\n          }\n        });\n\n        // @ts-ignore\n        if (pOutFlags.buffer.detached || !pOutFlags.buffer.byteLength) {\n          pOutFlags = new DataView(new ArrayBuffer(4));\n          this.#growthHandler = (pOutFlagsNew) => {\n            pOutFlagsNew.setInt32(0, pOutFlags.getInt32(0, true), true);\n          };\n        }\n        pOutFlags.setInt32(0, flags & VFS.SQLITE_OPEN_READONLY, true);\n        return VFS.SQLITE_OK;\n      } catch (e) {\n        console.error(e);\n        return VFS.SQLITE_CANTOPEN;\n      }\n    });\n\n    this.#growthHandler?.(pOutFlags);\n    this.#growthHandler = null;\n    return result;\n  }\n\n  /**\n   * @param {number} fileId \n   * @returns {number}\n   */\n  xClose(fileId) {\n    return this.handleAsync(async () => {\n      try {\n        const file = this.#mapIdToFile.get(fileId);\n        if (file) {\n          log(`xClose ${file.path}`);\n\n          this.#mapIdToFile.delete(fileId);\n          if (file.flags & VFS.SQLITE_OPEN_DELETEONCLOSE) {\n            this.#idb.run('readwrite', ({blocks}) => {\n              blocks.delete(IDBKeyRange.bound([file.path], [file.path, []]));\n            });\n          }\n        }\n        return VFS.SQLITE_OK;\n      } catch (e) {\n        console.error(e);\n        return VFS.SQLITE_IOERR;\n      }\n    });\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {Uint8Array} pData \n   * @param {number} iOffset\n   * @returns {number}\n   */\n  xRead(fileId, pData, iOffset) {\n    const byteLength = pData.byteLength;\n    const result = this.handleAsync(async () => {\n      const file = this.#mapIdToFile.get(fileId);\n      log(`xRead ${file.path} ${pData.byteLength} ${iOffset}`);\n\n      try {\n        // Read as many blocks as necessary to satisfy the read request.\n        // Usually a read fits within a single write but there is at least\n        // one case - rollback after journal spill - where reads cross\n        // write boundaries so we have to allow for that.\n        const result = await this.#idb.run('readonly', async ({blocks}) => {\n          // @ts-ignore\n          if (pData.buffer.detached || !pData.buffer.byteLength) {\n            // WebAssembly memory has grown, invalidating our buffer. Use\n            // a temporary buffer and copy after this asynchronous call\n            // completes.\n            pData = new Uint8Array(byteLength);\n            this.#growthHandler = (pDataNew) => pDataNew.set(pData);\n          }\n\n          let pDataOffset = 0;\n          while (pDataOffset < pData.byteLength) {\n            // Fetch the IndexedDB block for this file location.\n            const fileOffset = iOffset + pDataOffset;\n            /** @type {FileBlock} */\n            const block = fileOffset < file.block0.data.byteLength ?\n              file.block0 :\n              await blocks.get(this.#bound(file, -fileOffset));\n\n            if (!block || block.data.byteLength - block.offset <= fileOffset) {\n              pData.fill(0, pDataOffset);\n              return VFS.SQLITE_IOERR_SHORT_READ;\n            }\n\n            const buffer = pData.subarray(pDataOffset);\n            const blockOffset = fileOffset + block.offset;\n            const nBytesToCopy = Math.min(\n              Math.max(block.data.byteLength - blockOffset, 0), // source bytes\n              buffer.byteLength);                               // destination bytes\n            buffer.set(block.data.subarray(blockOffset, blockOffset + nBytesToCopy));\n            pDataOffset += nBytesToCopy;\n          }\n          return VFS.SQLITE_OK;\n        });\n        return result;\n      } catch (e) {\n        console.error(e);\n        return VFS.SQLITE_IOERR;\n      }\n    });\n\n    this.#growthHandler?.(pData);\n    this.#growthHandler = null;\n    return result;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {Uint8Array} pData \n   * @param {number} iOffset\n   * @returns {number}\n   */\n  xWrite(fileId, pData, iOffset) {\n    // Handle asynchronously every MAX_TASK_MILLIS milliseconds. This is\n    // tricky because Asyncify calls asynchronous methods twice: once\n    // to initiate the call and unwinds the stack, then rewinds the\n    // stack and calls again to retrieve the completed result.\n    const rewound = this.#pendingAsync.has(fileId);\n    if (rewound || performance.now() - this.#taskTimestamp > MAX_TASK_MILLIS) {\n      const result = this.handleAsync(async () => {\n        if (this.handleAsync !== super.handleAsync) {\n          this.#pendingAsync.add(fileId);\n        }\n        await new Promise(resolve => setTimeout(resolve));\n\n        const result = this.#xWriteHelper(fileId, pData.slice(), iOffset);\n        this.#taskTimestamp = performance.now();\n        return result;\n      });\n\n      if (rewound) this.#pendingAsync.delete(fileId);\n      return result;\n    }\n    return this.#xWriteHelper(fileId, pData, iOffset);\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {Uint8Array} pData \n   * @param {number} iOffset\n   * @returns {number}\n   */\n  #xWriteHelper(fileId, pData, iOffset) {\n    const file = this.#mapIdToFile.get(fileId);\n    log(`xWrite ${file.path} ${pData.byteLength} ${iOffset}`);\n\n    try {\n      // Update file size if appending.\n      const prevFileSize = file.block0.fileSize;\n      if (file.block0.fileSize < iOffset + pData.byteLength) {\n        file.block0.fileSize = iOffset + pData.byteLength;\n        file.isMetadataChanged = true;\n      }\n\n      // Convert the write directly into an IndexedDB object. Our assumption\n      // is that SQLite will only overwrite data with an xWrite of the same\n      // offset and size unless the database page size changes, except when\n      // changing database page size which is handled by #reblockIfNeeded().\n      const block = iOffset === 0 ? file.block0 : {\n        path: file.path,\n        offset: -iOffset,\n        version: file.block0.version,\n        data: null\n      };\n      block.data = pData.slice();\n\n      if (file.changedPages) {\n        // This write is part of a batch atomic write. All writes in the\n        // batch have a new version, so update the changed list to allow\n        // old versions to be eventually deleted.\n        if (prevFileSize === file.block0.fileSize) {\n          file.changedPages.add(-iOffset);\n        }\n\n        // Defer writing block 0 to IndexedDB until batch commit.\n        if (iOffset !== 0) {\n          this.#idb.run('readwrite', ({blocks}) => blocks.put(block));\n        }\n      } else {\n        // Not a batch atomic write so write through.\n        this.#idb.run('readwrite', ({blocks}) => blocks.put(block));\n      }\n\n      // Clear dirty flag if page 0 was written.\n      file.isMetadataChanged = iOffset === 0 ? false : file.isMetadataChanged;\n      return VFS.SQLITE_OK;\n    } catch (e) {\n      console.error(e);\n      return VFS.SQLITE_IOERR;\n    }\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} iSize \n   * @returns {number}\n   */\n  xTruncate(fileId, iSize) {\n    const file = this.#mapIdToFile.get(fileId);\n    log(`xTruncate ${file.path} ${iSize}`);\n\n    try {\n      Object.assign(file.block0, {\n        fileSize: iSize,\n        data: file.block0.data.slice(0, iSize)\n      });\n\n      // Delete all blocks beyond the file size and update metadata.\n      // This is never called within a transaction.\n      const block0 = Object.assign({}, file.block0);\n      this.#idb.run('readwrite', ({blocks})=> {\n        blocks.delete(this.#bound(file, -Infinity, -iSize));\n        blocks.put(block0);\n      });\n      return VFS.SQLITE_OK;\n    } catch (e) {\n      console.error(e);\n      return VFS.SQLITE_IOERR;\n    }\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} flags \n   * @returns {number}\n   */\n  xSync(fileId, flags) {\n    // Skip IndexedDB sync if durability is relaxed and the last\n    // sync was recent enough.\n    const rewound = this.#pendingAsync.has(fileId);\n    if (rewound || this.#options.durability !== 'relaxed' ||\n        performance.now() - this.#taskTimestamp > MAX_TASK_MILLIS) {\n      const result = this.handleAsync(async () => {\n        if (this.handleAsync !== super.handleAsync) {\n          this.#pendingAsync.add(fileId);\n        }\n\n        const result = await this.#xSyncHelper(fileId, flags);\n        this.#taskTimestamp = performance.now();\n        return result;\n      });\n\n      if (rewound) this.#pendingAsync.delete(fileId);\n      return result;\n    }\n\n    const file = this.#mapIdToFile.get(fileId);\n    log(`xSync ${file.path} ${flags}`);\n    return VFS.SQLITE_OK;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} flags \n   * @returns {Promise<number>}\n   */\n  async #xSyncHelper(fileId, flags) {\n    const file = this.#mapIdToFile.get(fileId);\n    log(`xSync ${file.path} ${flags}`);\n    try {\n      if (file.isMetadataChanged) {\n        // Metadata has changed so write block 0 to IndexedDB.\n        this.#idb.run('readwrite', async ({blocks}) => {\n          await blocks.put(file.block0);\n        }); \n        file.isMetadataChanged = false;\n      }\n      await this.#idb.sync();\n    } catch (e) {\n      console.error(e);\n      return VFS.SQLITE_IOERR;\n    }\n    return VFS.SQLITE_OK;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {DataView} pSize64 \n   * @returns {number}\n   */\n  xFileSize(fileId, pSize64) {\n    const file = this.#mapIdToFile.get(fileId);\n    log(`xFileSize ${file.path}`);\n\n    pSize64.setBigInt64(0, BigInt(file.block0.fileSize), true)\n    return VFS.SQLITE_OK;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} flags \n   * @returns {number}\n   */\n  xLock(fileId, flags) {\n    return this.handleAsync(async () => {\n      const file = this.#mapIdToFile.get(fileId);\n      log(`xLock ${file.path} ${flags}`);\n\n      try {\n        // Acquire the lock.\n        const result = await file.locks.lock(flags);\n        if (result === VFS.SQLITE_OK && file.locks.state === VFS.SQLITE_LOCK_SHARED) {\n          // Update block 0 in case another connection changed it.\n          file.block0 = await this.#idb.run('readonly', ({blocks}) => {\n            return blocks.get(this.#bound(file, 0));\n          });\n        }\n        return result;\n      } catch (e) {\n        console.error(e);\n        return VFS.SQLITE_IOERR;\n      }\n    });\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} flags \n   * @returns {number}\n   */\n  xUnlock(fileId, flags) {\n    return this.handleAsync(async () => {\n      const file = this.#mapIdToFile.get(fileId);\n      log(`xUnlock ${file.path} ${flags}`);\n      \n      try {\n        return file.locks.unlock(flags);\n      } catch(e) {\n        console.error(e);\n        return VFS.SQLITE_IOERR;\n      }\n    });\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {DataView} pResOut \n   * @returns {number}\n   */\n  xCheckReservedLock(fileId, pResOut) {\n    const result = this.handleAsync(async () => {\n      const file = this.#mapIdToFile.get(fileId);\n      log(`xCheckReservedLock ${file.path}`);\n\n      const isReserved = await file.locks.isSomewhereReserved();\n      function setOutput(pResOut) {\n      };\n\n      // @ts-ignore\n      if (pResOut.buffer.detached || !pResOut.buffer.byteLength) {\n        pResOut = new DataView(new ArrayBuffer(4));\n        this.#growthHandler = (pResOutNew) => {\n          pResOutNew.setInt32(0, pResOut.getInt32(0, true), true);\n        };\n      }\n      pResOut.setInt32(0, isReserved ? 1 : 0, true);\n      return VFS.SQLITE_OK;\n    });\n\n    this.#growthHandler?.(pResOut);\n    this.#growthHandler = null;\n    return result;\n  }\n\n  /**\n   * @param {number} fileId \n   * @returns {number}\n   */\n  xSectorSize(fileId) {\n    log('xSectorSize');\n    return SECTOR_SIZE;\n  }\n\n  /**\n   * @param {number} fileId \n   * @returns {number}\n   */\n  xDeviceCharacteristics(fileId) {\n    log('xDeviceCharacteristics');\n    return VFS.SQLITE_IOCAP_BATCH_ATOMIC |\n           VFS.SQLITE_IOCAP_SAFE_APPEND |\n           VFS.SQLITE_IOCAP_SEQUENTIAL |\n           VFS.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;\n  }\n\n  /**\n   * @param {number} fileId \n   * @param {number} op \n   * @param {DataView} pArg \n   * @returns {number}\n   */\n  xFileControl(fileId, op, pArg) {\n    const file = this.#mapIdToFile.get(fileId);\n    log(`xFileControl ${file.path} ${op}`);\n\n    switch (op) {\n      case 11: //SQLITE_FCNTL_OVERWRITE\n        // This called on VACUUM. Set a flag so we know whether to check\n        // later if the page size changed.\n        file.overwrite = true;\n        return VFS.SQLITE_OK;\n\n      case 21: // SQLITE_FCNTL_SYNC\n        // This is called at the end of each database transaction, whether\n        // it is batch atomic or not. Handle page size changes here.\n        if (file.overwrite) {\n          // As an optimization we only check for and handle a page file\n          // changes if we know a VACUUM has been done because handleAsync()\n          // has to unwind and rewind the stack. We must be sure to follow\n          // the same conditional path in both calls.\n          try {\n            return this.handleAsync(async () => {\n              await this.#reblockIfNeeded(file);\n              return VFS.SQLITE_OK;\n            });\n          } catch (e) {\n            console.error(e);\n            return VFS.SQLITE_IOERR;\n          }\n        }\n\n        if (file.isMetadataChanged) {\n          // Metadata has changed so write block 0 to IndexedDB.\n          try {\n            this.#idb.run('readwrite', async ({blocks}) => {\n              await blocks.put(file.block0);\n            });\n            file.isMetadataChanged = false;\n          } catch (e) {\n            console.error(e);\n            return VFS.SQLITE_IOERR;\n          }\n        }\n        return VFS.SQLITE_OK;\n\n      case 22: // SQLITE_FCNTL_COMMIT_PHASETWO\n        // This is called after a commit is completed.\n        file.overwrite = false;\n        return VFS.SQLITE_OK;\n\n      case 31: // SQLITE_FCNTL_BEGIN_ATOMIC_WRITE\n        return this.handleAsync(async () => {\n          try {\n            // Prepare a new version for IndexedDB blocks.\n            file.block0.version--;\n            file.changedPages = new Set();\n\n            // Clear blocks from abandoned transactions that would conflict\n            // with the new transaction.\n            this.#idb.run('readwrite', async ({blocks}) => {\n              const keys = await blocks.index('version').getAllKeys(IDBKeyRange.bound(\n                [file.path],\n                [file.path, file.block0.version]));\n              for (const key of keys) {\n                blocks.delete(key);\n              }\n            });\n            return VFS.SQLITE_OK;\n          } catch (e) {\n            console.error(e);\n            return VFS.SQLITE_IOERR;\n          }\n        });\n\n      case 32: // SQLITE_FCNTL_COMMIT_ATOMIC_WRITE\n        try {\n          const block0 = Object.assign({}, file.block0);\n          block0.data = block0.data.slice();\n          const changedPages = file.changedPages;\n          file.changedPages = null;\n          file.isMetadataChanged = false;\n          this.#idb.run('readwrite', async ({blocks})=> {\n            // Write block 0 to commit the new version.\n            blocks.put(block0);\n\n            // Blocks to purge are saved in a special IndexedDB object with\n            // an \"index\" of \"purge\". Add pages changed by this transaction.\n            const purgeBlock = await blocks.get([file.path, 'purge', 0]) ?? {\n              path: file.path,\n              offset: 'purge',\n              version: 0,\n              data: new Map(),\n              count: 0\n            };\n\n            purgeBlock.count += changedPages.size;\n            for (const pageIndex of changedPages) {\n              purgeBlock.data.set(pageIndex, block0.version);\n            }\n\n            blocks.put(purgeBlock);\n            this.#maybePurge(file.path, purgeBlock.count);\n          });\n          return VFS.SQLITE_OK;\n        } catch (e) {\n          console.error(e);\n          return VFS.SQLITE_IOERR;\n        }\n\n      case 33: // SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE\n        return this.handleAsync(async () => {\n          try {\n            // Restore original state. Objects for the abandoned version will\n            // be left in IndexedDB to be removed by the next atomic write\n            // transaction.\n            file.changedPages = null;\n            file.isMetadataChanged = false;\n            file.block0 = await this.#idb.run('readonly', ({blocks}) => {\n              return blocks.get([file.path, 0, file.block0.version + 1]);\n            });\n            return VFS.SQLITE_OK;\n          } catch (e) {\n            console.error(e);\n            return VFS.SQLITE_IOERR;\n          }\n        });\n\n      default:\n        return VFS.SQLITE_NOTFOUND;\n    }\n  }\n\n  /**\n   * @param {string} name \n   * @param {number} flags \n   * @param {DataView} pResOut \n   * @returns {number}\n   */\n  xAccess(name, flags, pResOut) {\n    const result = this.handleAsync(async () => {\n      try {\n        const path = new URL(name, 'file://localhost/').pathname;\n        log(`xAccess ${path} ${flags}`);\n\n        // Check if block 0 exists.\n        const key = await this.#idb.run('readonly', ({blocks}) => {\n          return blocks.getKey(this.#bound({path}, 0));\n        });\n\n        // @ts-ignore\n        if (pResOut.buffer.detached || !pResOut.buffer.byteLength) {\n          pResOut = new DataView(new ArrayBuffer(4));\n          this.#growthHandler = (pResOutNew) => {\n            pResOutNew.setInt32(0, pResOut.getInt32(0, true), true);\n          }\n        }\n        pResOut.setInt32(0, key ? 1 : 0, true);\n        return VFS.SQLITE_OK;\n      } catch (e) {\n        console.error(e);\n        return VFS.SQLITE_IOERR;\n      }\n    });\n\n    this.#growthHandler?.(pResOut);\n    this.#growthHandler = null;\n    return result;\n  }\n\n  /**\n   * @param {string} name \n   * @param {number} syncDir \n   * @returns {number}\n   */\n  xDelete(name, syncDir) {\n    return this.handleAsync(async () => {\n      const path = new URL(name, 'file://localhost/').pathname;\n      log(`xDelete ${path} ${syncDir}`);\n\n      try {\n        this.#idb.run('readwrite', ({blocks}) => {\n          return blocks.delete(IDBKeyRange.bound([path], [path, []]));\n        });\n        if (syncDir) {\n          await this.#idb.sync();\n        }\n        return VFS.SQLITE_OK;\n      } catch (e) {\n        console.error(e);\n        return VFS.SQLITE_IOERR;\n      }\n    });\n  }\n\n  /**\n   * Purge obsolete blocks from a database file.\n   * @param {string} path \n   */\n  async purge(path) {\n    const start = Date.now();\n    await this.#idb.run('readwrite', async ({blocks}) => {\n      const purgeBlock = await blocks.get([path, 'purge', 0]);\n      if (purgeBlock) {\n        for (const [pageOffset, version] of purgeBlock.data) {\n          blocks.delete(IDBKeyRange.bound(\n            [path, pageOffset, version],\n            [path, pageOffset, Infinity],\n            true, false));\n        }\n        await blocks.delete([path, 'purge', 0]);\n      }\n      log(`purge ${path} ${purgeBlock?.data.size ?? 0} pages in ${Date.now() - start} ms`);\n    });\n  }\n\n  /**\n   * Conditionally schedule a purge task.\n   * @param {string} path \n   * @param {number} nPages \n   */\n  #maybePurge(path, nPages) {\n    if (this.#options.purge === 'manual' ||\n        this.#pendingPurges.has(path) ||\n        nPages < this.#options.purgeAtLeast) {\n      // No purge needed.\n      return;\n    }\n    \n    if (globalThis.requestIdleCallback) {\n      globalThis.requestIdleCallback(() => {\n        this.purge(path);\n        this.#pendingPurges.delete(path)\n      });\n    } else {\n      setTimeout(() => {\n        this.purge(path);\n        this.#pendingPurges.delete(path)\n      });\n    }\n    this.#pendingPurges.add(path);\n  }\n\n  #bound(file, begin, end = 0) {\n    // Fetch newest block 0. For other blocks, use block 0 version.\n    const version = !begin || -begin < file.block0.data.length ?\n      -Infinity :\n      file.block0.version;\n    return IDBKeyRange.bound(\n      [file.path, begin, version],\n      [file.path, end, Infinity]);\n  }\n\n  // The database page size can be changed with PRAGMA page_size and VACUUM.\n  // The updated file will be overwritten with a regular transaction using\n  // the old page size. After that it will be read and written using the\n  // new page size, so the IndexedDB objects must be combined or split\n  // appropriately.\n  async #reblockIfNeeded(file) {\n    const oldPageSize = file.block0.data.length;\n    if (oldPageSize < 18) return; // no page size defined\n\n    const view = new DataView(file.block0.data.buffer, file.block0.data.byteOffset);\n    let newPageSize = view.getUint16(16);\n    if (newPageSize === 1) newPageSize = 65536;\n    if (newPageSize === oldPageSize) return; // no page size change\n\n    const maxPageSize = Math.max(oldPageSize, newPageSize);\n    const nOldPages = maxPageSize / oldPageSize;\n    const nNewPages = maxPageSize / newPageSize;\n\n    const newPageCount = view.getUint32(28);\n    const fileSize = newPageCount * newPageSize;\n\n    const version = file.block0.version;\n    await this.#idb.run('readwrite', async ({blocks}) => {\n      // When the block size changes, the entire file is rewritten. Delete\n      // all blocks older than block 0 to leave a single version at every\n      // offset.\n      const keys = await blocks.index('version').getAllKeys(IDBKeyRange.bound(\n        [file.path, version + 1],\n        [file.path, Infinity]\n      ));\n      for (const key of keys) {\n        blocks.delete(key);\n      }\n      blocks.delete([file.path, 'purge', 0]);\n\n      // Do the conversion in chunks of the larger of the page sizes.\n      for (let iOffset = 0; iOffset < fileSize; iOffset += maxPageSize) {\n        // Fetch nOldPages. They can be fetched in one request because\n        // there is now a single version in the file.\n        const oldPages = await blocks.getAll(\n          IDBKeyRange.lowerBound([file.path, -(iOffset + maxPageSize), Infinity]),\n          nOldPages);\n        for (const oldPage of oldPages) {\n          blocks.delete([oldPage.path, oldPage.offset, oldPage.version]);\n        }\n\n        // Convert to new pages.\n        if (nNewPages === 1) {\n          // Combine nOldPages old pages into a new page.\n          const buffer = new Uint8Array(newPageSize);\n          for (const oldPage of oldPages) {\n            buffer.set(oldPage.data, -(iOffset + oldPage.offset));\n          }\n          const newPage = {\n            path: file.path,\n            offset: -iOffset,\n            version,\n            data: buffer\n          };\n          if (newPage.offset === 0) {\n            newPage.fileSize = fileSize;\n            file.block0 = newPage;\n          }\n          blocks.put(newPage);\n        } else {\n          // Split an old page into nNewPages new pages.\n          const oldPage = oldPages[0];\n          for (let i = 0; i < nNewPages; ++i) {\n            const offset = -(iOffset + i * newPageSize);\n            if (-offset >= fileSize) break;\n            const newPage = {\n              path: oldPage.path,\n              offset,\n              version,\n              data: oldPage.data.subarray(i * newPageSize, (i + 1) * newPageSize)\n            }\n            if (newPage.offset === 0) {\n              newPage.fileSize = fileSize;\n              file.block0 = newPage;\n            }\n            blocks.put(newPage);\n          }\n        }\n      }\n    });\n  }\n}\n\nfunction openDatabase(idbDatabaseName) {\n  return new Promise((resolve, reject) => {\n    const request = globalThis.indexedDB.open(idbDatabaseName, 5);\n    request.addEventListener('upgradeneeded', function() {\n      const blocks = request.result.createObjectStore('blocks', {\n        keyPath: ['path', 'offset', 'version']\n      });\n      blocks.createIndex('version', ['path', 'version']);\n    });\n    request.addEventListener('success', () => {\n      resolve(request.result);\n    });\n    request.addEventListener('error', () => {\n      reject(request.error);\n    });\n  });\n}","// Copyright 2022 Roy T. Hashimoto. All Rights Reserved.\n\n// IndexedDB transactions older than this will be replaced.\nconst MAX_TRANSACTION_LIFETIME_MILLIS = 5_000;\n\n// For debugging.\nlet nextTxId = 0;\nconst mapTxToId = new WeakMap();\nfunction log(...args) {\n  // console.debug(...args);\n}\n\n// This class manages IDBTransaction and IDBRequest instances. It tries\n// to reuse transactions to minimize transaction overhead.\nexport class IDBContext {\n  /** @type {IDBDatabase} */ #db;\n  /** @type {Promise<IDBDatabase>} */ #dbReady;\n  #txOptions;\n\n  /** @type {IDBTransaction} */ #tx = null;\n  #txTimestamp = 0;\n  #runChain = Promise.resolve();\n  #putChain = Promise.resolve();\n\n  /**\n   * @param {IDBDatabase|Promise<IDBDatabase>} idbDatabase\n   */\n  constructor(idbDatabase, txOptions = { durability: 'default' }) {\n    this.#dbReady = Promise.resolve(idbDatabase).then(db => this.#db = db);\n    this.#txOptions = txOptions;\n  }\n\n  async close() {\n    const db = this.#db ?? await this.#dbReady;\n    await this.#runChain;\n    await this.sync();\n    db.close();\n  }\n  \n  /**\n   * Run a function with the provided object stores. The function\n   * should be idempotent in case it is passed an expired transaction.\n   * @param {IDBTransactionMode} mode\n   * @param {(stores: Object.<string, ObjectStore>) => any} f \n   */\n  async run(mode, f) {\n    // Ensure that functions run sequentially.\n    const result = this.#runChain.then(() => this.#run(mode, f));\n    this.#runChain = result.catch(() => {});\n    return result;\n  }\n\n  /**\n   * @param {IDBTransactionMode} mode\n   * @param {(stores: Object.<string, ObjectStore>) => any} f \n   * @returns \n   */\n  async #run(mode, f) {\n    const db = this.#db ?? await this.#dbReady;\n    if (mode === 'readwrite' && this.#tx?.mode === 'readonly') {\n      // Mode requires a new transaction.\n      this.#tx = null;\n    } else if (performance.now() - this.#txTimestamp > MAX_TRANSACTION_LIFETIME_MILLIS) {\n      // Chrome times out transactions after 60 seconds so refresh preemptively.\n      try {\n        this.#tx?.commit();\n      } catch (e) {\n        // Explicit commit can fail but this can be ignored if it will\n        // auto-commit anyway.\n        if (e.name !== 'InvalidStateError') throw e;\n      }\n\n      // Skip to the next task to allow processing.\n      await new Promise(resolve => setTimeout(resolve));\n      this.#tx = null;\n    }\n\n    // Run the user function with a retry in case the transaction is invalid.\n    for (let i = 0; i < 2; ++i) {\n      if (!this.#tx) {\n        // @ts-ignore\n        this.#tx = db.transaction(db.objectStoreNames, mode, this.#txOptions);\n        const timestamp = this.#txTimestamp = performance.now();\n\n        // Chain the result of every transaction. If any transaction is\n        // aborted then the next sync() call will throw.\n        this.#putChain = this.#putChain.then(() => {\n          return new Promise((resolve, reject) => {\n            this.#tx.addEventListener('complete', event => {\n              resolve();\n              if (this.#tx === event.target) {\n                this.#tx = null;\n              }\n              log(`transaction ${mapTxToId.get(event.target)} complete`);\n            });\n            this.#tx.addEventListener('abort', event => {\n              console.warn('tx abort', (performance.now() - timestamp)/1000);\n              // @ts-ignore\n              const e = event.target.error;\n              reject(e);\n              if (this.#tx === event.target) {\n                this.#tx = null;\n              }\n              log(`transaction ${mapTxToId.get(event.target)} aborted`, e);\n            });\n          });\n        });\n\n        log(`new transaction ${nextTxId} ${mode}`);\n        mapTxToId.set(this.#tx, nextTxId++);\n      }\n\n      try {\n        const stores = Object.fromEntries(Array.from(db.objectStoreNames, name => {\n          return [name, new ObjectStore(this.#tx.objectStore(name))];\n        }));\n        return await f(stores);\n      } catch (e) {\n        this.#tx = null;\n        if (i) throw e;\n        // console.warn('retrying with new transaction');\n      }\n    }\n  }\n\n  async sync() {\n    // Wait until all transactions since the previous sync have committed.\n    // Throw if any transaction failed.\n    await this.#runChain;\n    await this.#putChain;\n    this.#putChain = Promise.resolve();\n  }\n}\n\n/**\n * Helper to convert IDBRequest to Promise.\n * @param {IDBRequest} request \n * @returns {Promise}\n */\nfunction wrapRequest(request) {\n  return new Promise((resolve, reject) => {\n    request.addEventListener('success', () => resolve(request.result));\n    request.addEventListener('error', () => reject(request.error));\n  });\n}\n\n// IDBObjectStore wrapper passed to IDBContext run functions.\nclass ObjectStore {\n  #objectStore;\n\n  /**\n   * @param {IDBObjectStore} objectStore \n   */\n  constructor(objectStore) {\n    this.#objectStore = objectStore;\n  }\n\n  /**\n   * @param {IDBValidKey|IDBKeyRange} query \n   * @returns {Promise}\n   */\n  get(query) {\n    log(`get ${this.#objectStore.name}`, query);\n    const request = this.#objectStore.get(query);\n    return wrapRequest(request);\n  }\n\n  /**\n   * @param {IDBValidKey|IDBKeyRange} query \n   * @param {number} [count]\n   * @returns {Promise}\n   */\n   getAll(query, count) {\n    log(`getAll ${this.#objectStore.name}`, query, count);\n    const request = this.#objectStore.getAll(query, count);\n    return wrapRequest(request);\n  }\n\n  /**\n   * @param {IDBValidKey|IDBKeyRange} query \n   * @returns {Promise<IDBValidKey>}\n   */\n  getKey(query) {\n    log(`getKey ${this.#objectStore.name}`, query);\n    const request = this.#objectStore.getKey(query);\n    return wrapRequest(request);\n  }\n\n  /**\n   * @param {IDBValidKey|IDBKeyRange} query \n   * @param {number} [count]\n   * @returns {Promise}\n   */\n   getAllKeys(query, count) {\n    log(`getAllKeys ${this.#objectStore.name}`, query, count);\n    const request = this.#objectStore.getAllKeys(query, count);\n    return wrapRequest(request);\n  }\n\n  /**\n   * @param {any} value\n   * @param {IDBValidKey} [key] \n   * @returns {Promise}\n   */\n   put(value, key) {\n    log(`put ${this.#objectStore.name}`, value, key);\n    const request = this.#objectStore.put(value, key);\n    return wrapRequest(request);\n  }\n\n  /**\n   * @param {IDBValidKey|IDBKeyRange} query \n   * @returns {Promise}\n   */\n   delete(query) {\n    log(`delete ${this.#objectStore.name}`, query);\n    const request = this.#objectStore.delete(query);\n    return wrapRequest(request);\n  }\n\n  clear() {\n    log(`clear ${this.#objectStore.name}`);\n    const request = this.#objectStore.clear();\n    return wrapRequest(request);\n  }\n\n  index(name) {\n    return new Index(this.#objectStore.index(name));\n  }\n}\n\nclass Index {\n  /** @type {IDBIndex} */ #index;\n\n  /**\n   * @param {IDBIndex} index \n   */\n   constructor(index) {\n    this.#index = index;\n  }\n\n  /**\n   * @param {IDBValidKey|IDBKeyRange} query \n   * @param {number} [count]\n   * @returns {Promise<IDBValidKey[]>}\n   */\n  getAllKeys(query, count) {\n    log(`IDBIndex.getAllKeys ${this.#index.objectStore.name}<${this.#index.name}>`, query, count);\n    const request = this.#index.getAllKeys(query, count);\n    return wrapRequest(request);\n  }\n}","// Copyright 2022 Roy T. Hashimoto. All Rights Reserved.\nimport * as VFS from '../VFS.js';\n\nconst LOCK_TYPE_MASK =\n  VFS.SQLITE_LOCK_NONE |\n  VFS.SQLITE_LOCK_SHARED |\n  VFS.SQLITE_LOCK_RESERVED |\n  VFS.SQLITE_LOCK_PENDING |\n  VFS.SQLITE_LOCK_EXCLUSIVE;\n\nexport class WebLocksBase {\n  get state() { return this.#state; }\n  #state = VFS.SQLITE_LOCK_NONE;\n\n  timeoutMillis = 0;\n\n  /** @type {Map<string, (value: any) => void>} */ #releasers = new Map();\n  /** @type {Promise<0|5|3850>} */ #pending = Promise.resolve(0);\n\n  /**\n   * @param {number} flags \n   * @returns {Promise<0|5|3850>} SQLITE_OK, SQLITE_BUSY, SQLITE_IOERR_LOCK\n   */\n  async lock(flags) {\n    return this.#apply(this.#lock, flags);\n  }\n\n  /**\n   * @param {number} flags \n   * @returns {Promise<0|5|3850>} SQLITE_OK, SQLITE_IOERR_LOCK\n   */\n  async unlock(flags) {\n    return this.#apply(this.#unlock, flags);\n  }\n\n  /**\n   * @returns {Promise<boolean>}\n   */\n  async isSomewhereReserved() {\n    throw new Error('unimplemented');\n  }\n\n  /**\n   * \n   * @param {(targetState: number) => void} method \n   * @param {number} flags \n   */\n  async #apply(method, flags) {\n    const targetState = flags & LOCK_TYPE_MASK;\n    try {\n      // Force locks and unlocks to run sequentially. This allows not\n      // waiting for unlocks to complete.\n      const call = () => method.call(this, targetState);\n      await (this.#pending = this.#pending.then(call, call));\n      this.#state = targetState;\n      return VFS.SQLITE_OK;\n    } catch (e) {\n      if (e.name === 'AbortError') {\n        return VFS.SQLITE_BUSY;\n      }\n      console.error(e);\n      return VFS.SQLITE_IOERR_LOCK;\n    }\n  }\n\n  async #lock(targetState) {\n    if (targetState === this.#state) return VFS.SQLITE_OK;\n    switch (this.#state) {\n      case VFS.SQLITE_LOCK_NONE:\n        switch (targetState) {\n          case VFS.SQLITE_LOCK_SHARED:\n            return this._NONEtoSHARED();\n          default:\n            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);\n        }\n\n      case VFS.SQLITE_LOCK_SHARED:\n        switch (targetState) {\n          case VFS.SQLITE_LOCK_RESERVED:\n            return this._SHAREDtoRESERVED();\n          case VFS.SQLITE_LOCK_EXCLUSIVE:\n            return this._SHAREDtoEXCLUSIVE();\n          default:\n            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);\n        }\n      \n      case VFS.SQLITE_LOCK_RESERVED:\n        switch (targetState) {\n          case VFS.SQLITE_LOCK_EXCLUSIVE:\n            return this._RESERVEDtoEXCLUSIVE();\n          default:\n            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);\n        }\n\n      default:\n        throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);\n    }\n  }\n\n  async #unlock(targetState) {\n    if (targetState === this.#state)  return VFS.SQLITE_OK;\n    switch (this.#state) {\n      case VFS.SQLITE_LOCK_EXCLUSIVE:\n        switch (targetState) {\n          case VFS.SQLITE_LOCK_SHARED:\n            return this._EXCLUSIVEtoSHARED();\n          case VFS.SQLITE_LOCK_NONE:\n            return this._EXCLUSIVEtoNONE();\n          default:\n            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);\n        }\n      \n      case VFS.SQLITE_LOCK_RESERVED:\n        switch (targetState) {\n          case VFS.SQLITE_LOCK_SHARED:\n            return this._RESERVEDtoSHARED();\n          case VFS.SQLITE_LOCK_NONE:\n            return this._RESERVEDtoNONE();\n          default:\n            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);\n        }\n\n      case VFS.SQLITE_LOCK_SHARED:\n        switch (targetState) {\n          case VFS.SQLITE_LOCK_NONE:\n            return this._SHAREDtoNONE();\n          default:\n            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);\n        }\n\n      default:\n        throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);\n    }\n  }\n\n  async _NONEtoSHARED() {\n  }\n\n  async _SHAREDtoEXCLUSIVE() {\n    await this._SHAREDtoRESERVED();\n    await this._RESERVEDtoEXCLUSIVE();\n  }\n\n  async _SHAREDtoRESERVED() {\n  }\n\n  async _RESERVEDtoEXCLUSIVE() {\n  }\n\n  async _EXCLUSIVEtoRESERVED() {\n  }\n\n  async _EXCLUSIVEtoSHARED() {\n    await this._EXCLUSIVEtoRESERVED();\n    await this._RESERVEDtoSHARED();\n  }\n\n  async _EXCLUSIVEtoNONE() {\n    await this._EXCLUSIVEtoRESERVED();\n    await this._RESERVEDtoSHARED();\n    await this._SHAREDtoNONE();\n  }\n\n  async _RESERVEDtoSHARED() {\n  }\n\n  async _RESERVEDtoNONE() {\n    await this._RESERVEDtoSHARED();\n    await this._SHAREDtoNONE();\n  }\n\n  async _SHAREDtoNONE() {\n  }\n\n  /**\n   * @param {string} lockName \n   * @param {LockOptions} options \n   * @returns {Promise<?Lock>}\n   */\n  _acquireWebLock(lockName, options) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await navigator.locks.request(lockName, options, lock => {\n          resolve(lock);\n          if (lock) {\n            return new Promise(release => this.#releasers.set(lockName, release));\n          }\n        });\n      } catch(e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * @param {string} lockName \n   */\n  _releaseWebLock(lockName) {\n    this.#releasers.get(lockName)?.();\n    this.#releasers.delete(lockName);\n  }\n\n  /**\n   * @param {string} lockName \n   */\n  async _pollWebLock(lockName) {\n    const query = await navigator.locks.query();\n    return query.held.find(({name}) => name === lockName)?.mode;\n  }\n\n  /**\n   * @returns {?AbortSignal}\n   */\n  _getTimeoutSignal() {\n    if (this.timeoutMillis) {\n      const abortController = new AbortController();\n      setTimeout(() => abortController.abort(), this.timeoutMillis);\n      return abortController.signal;\n    }\n    return undefined;\n  }\n}\n\nexport class WebLocksExclusive extends WebLocksBase {\n  /**\n   * @param {string} name \n   */\n  constructor(name) {\n    super();\n    this._lockName = name + '-outer';\n    this._reservedName = name + '-reserved';\n  }\n\n  async isSomewhereReserved() {\n    const mode = await this._pollWebLock(this._reservedName);\n    return mode === 'exclusive';\n  }\n\n  async _NONEtoSHARED() {\n    await this._acquireWebLock(this._lockName, {\n      mode: 'exclusive',\n      signal: this._getTimeoutSignal()\n    });\n  }\n\n  async _SHAREDtoRESERVED() {\n    await this._acquireWebLock(this._reservedName, {\n      mode: 'exclusive',\n      signal: this._getTimeoutSignal()\n    });\n  }\n\n  async _RESERVEDtoSHARED() {\n    this._releaseWebLock(this._reservedName);\n  }\n\n  async _SHAREDtoNONE() {\n    this._releaseWebLock(this._lockName);\n  }\n}\n\nexport class WebLocksShared extends WebLocksBase {\n  maxRetryMillis = 1000;\n\n  /**\n   * @param {string} name \n   */\n  constructor(name) {\n    super();\n    this._outerName = name + '-outer';\n    this._innerName = name + '-inner';\n  }\n\n  async isSomewhereReserved() {\n    const mode = await this._pollWebLock(this._outerName);\n    return mode === 'exclusive';\n  }\n\n  async _NONEtoSHARED() {\n    await this._acquireWebLock(this._outerName, {\n      mode: 'shared',\n      signal: this._getTimeoutSignal()\n    });\n    await this._acquireWebLock(this._innerName, {\n      mode: 'shared',\n      signal: this._getTimeoutSignal()\n    });\n    this._releaseWebLock(this._outerName);\n  }\n\n  async _SHAREDtoRESERVED() {\n    let timeoutMillis = 1;\n    while (true) {\n      // Attempt to get the outer lock without blocking.\n      const isLocked = await this._acquireWebLock(this._outerName, {\n        mode: 'exclusive',\n        ifAvailable: true\n      });\n      if (isLocked) break;\n\n      if (await this.isSomewhereReserved()) {\n        // Someone else has a reserved lock so retry cannot succeed.\n        throw new DOMException('', 'AbortError');\n      }\n\n      await new Promise(resolve => setTimeout(resolve, timeoutMillis));\n      timeoutMillis = Math.min(2 * timeoutMillis, this.maxRetryMillis);\n    }\n    this._releaseWebLock(this._innerName);\n  }\n\n  async _RESERVEDtoEXCLUSIVE() {\n    await this._acquireWebLock(this._innerName, {\n      mode: 'exclusive',\n      signal: this._getTimeoutSignal()\n    });\n  }\n\n  async _EXCLUSIVEtoRESERVED() {\n    this._releaseWebLock(this._innerName);\n  }\n\n  async _RESERVEDtoSHARED() {\n    await this._acquireWebLock(this._innerName, { mode: 'shared' });\n    this._releaseWebLock(this._outerName);\n  }\n\n  async _SHAREDtoNONE() {\n    this._releaseWebLock(this._innerName);\n  }\n}"],"names":["VFS","Base","mxPathName","xClose","fileId","SQLITE_IOERR","xRead","pData","iOffset","xWrite","xTruncate","iSize","xSync","flags","SQLITE_OK","xFileSize","pSize64","xLock","xUnlock","xCheckReservedLock","pResOut","setInt32","xFileControl","op","pArg","SQLITE_NOTFOUND","xSectorSize","xDeviceCharacteristics","xOpen","name","pOutFlags","SQLITE_CANTOPEN","xDelete","syncDir","xAccess","handleAsync","f","FILE_TYPE_MASK","SQLITE_OPEN_MAIN_DB","SQLITE_OPEN_MAIN_JOURNAL","SQLITE_OPEN_TEMP_DB","SQLITE_OPEN_TEMP_JOURNAL","SQLITE_OPEN_TRANSIENT_DB","SQLITE_OPEN_SUBJOURNAL","SQLITE_OPEN_SUPER_JOURNAL","reduce","mask","element","WebLocksExclusive","WebLocks","IDBContext","SECTOR_SIZE","MAX_TASK_MILLIS","DEFAULT_OPTIONS","durability","purge","purgeAtLeast","log","args","IDBBatchAtomicVFS","options","mapIdToFile","Map","idb","pendingPurges","Set","taskTimestamp","performance","now","pendingAsync","growthHandler","constructor","idbDatabaseName","Object","assign","openDatabase","close","_this","_asyncToGenerator","keys","_this2","result","toString","url","URL","file","path","pathname","block0","isMetadataChanged","locks","set","run","_ref2","blocks","get","bound","SQLITE_OPEN_CREATE","offset","version","data","Uint8Array","fileSize","put","Error","_x","apply","arguments","buffer","detached","byteLength","DataView","ArrayBuffer","pOutFlagsNew","getInt32","SQLITE_OPEN_READONLY","e","console","error","_this3","delete","SQLITE_OPEN_DELETEONCLOSE","IDBKeyRange","_this4","_ref5","pDataNew","pDataOffset","fileOffset","block","fill","SQLITE_IOERR_SHORT_READ","subarray","blockOffset","nBytesToCopy","Math","min","max","_x2","_superprop_getHandleAsync","_this5","rewound","has","add","Promise","resolve","setTimeout","xWriteHelper","slice","#xWriteHelper","prevFileSize","changedPages","Infinity","_superprop_getHandleAsync2","_this6","xSyncHelper","#xSyncHelper","_this7","_ref8","_x3","sync","setBigInt64","BigInt","_this8","lock","state","SQLITE_LOCK_SHARED","_this9","unlock","_this10","isReserved","isSomewhereReserved","setOutput","pResOutNew","SQLITE_IOCAP_BATCH_ATOMIC","SQLITE_IOCAP_SAFE_APPEND","SQLITE_IOCAP_SEQUENTIAL","SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN","_this11","overwrite","reblockIfNeeded","_ref13","_x4","_ref15","index","getAllKeys","key","_x5","_ref16","purgeBlock","count","size","pageIndex","maybePurge","_x6","_this12","getKey","_this13","_this14","start","Date","_ref20","pageOffset","_x7","#maybePurge","nPages","globalThis","requestIdleCallback","#bound","begin","end","length","#reblockIfNeeded","_this15","oldPageSize","view","byteOffset","newPageSize","getUint16","maxPageSize","nOldPages","nNewPages","newPageCount","getUint32","_ref21","oldPages","getAll","lowerBound","oldPage","newPage","i","_x8","reject","request","indexedDB","open","addEventListener","createObjectStore","keyPath","createIndex","MAX_TRANSACTION_LIFETIME_MILLIS","nextTxId","mapTxToId","WeakMap","db","dbReady","txOptions","tx","txTimestamp","runChain","putChain","idbDatabase","then","mode","catch","#run","commit","transaction","objectStoreNames","timestamp","event","target","warn","stores","fromEntries","Array","from","ObjectStore","objectStore","wrapRequest","query","value","clear","Index","LOCK_TYPE_MASK","SQLITE_LOCK_NONE","SQLITE_LOCK_RESERVED","SQLITE_LOCK_PENDING","SQLITE_LOCK_EXCLUSIVE","WebLocksBase","timeoutMillis","releasers","pending","#apply","method","targetState","call","SQLITE_BUSY","SQLITE_IOERR_LOCK","#lock","_NONEtoSHARED","_SHAREDtoRESERVED","_SHAREDtoEXCLUSIVE","_RESERVEDtoEXCLUSIVE","#unlock","_EXCLUSIVEtoSHARED","_EXCLUSIVEtoNONE","_RESERVEDtoSHARED","_RESERVEDtoNONE","_SHAREDtoNONE","_EXCLUSIVEtoRESERVED","_acquireWebLock","lockName","_ref","navigator","release","_releaseWebLock","_pollWebLock","held","find","_getTimeoutSignal","abortController","AbortController","abort","signal","undefined","_lockName","_reservedName","WebLocksShared","maxRetryMillis","_outerName","_innerName","_this16","_this17","_this18","isLocked","ifAvailable","DOMException","_this19","_this20","_this21","_this22"],"sourceRoot":""}